#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<string.h>

//Complete the code of the parallel program for Matrix-Vector Multiplication

//The program will read the matrix A and vector x
//from input files

// Global variable (accessible to all threads)
int num_threads;
int m,n;

/***
void *mat_vect( void* id){

  long thread_id = (long)id;
  int local_m = m/num_threads;
  int my_first_row = thread_id * local_m;
  int my_last_row = (thread_id+1)*local_m;

  for(int i = my_first_row; i<=my_last_row; i++){
    y[i] = 0.0;
    for(int j=0;j<n;j++)
      y[i] += A[i][j] * x[j];
  }

  return NULL;
  
}
**/

////////////////////////////////////////////////////////////////////////////////
void* hello( void* id ){
  long thread_id = (long)id;
  if(thread_id == -1) 
    printf("Hello from MAIN thread\n");
  else
    printf("Hello from thread %ld of %d\n", thread_id, num_threads);
  return NULL;
}

////////////////////////////////////////////////////////////////////////////////
int main(int argc, char* argv[]){

  int i,j;
  int num;
  int num2;
  int arr[3][3];
  int vect[3];
  FILE* file1;
  FILE* file2;
  char ch1,ch2;
  
  //abrir el archivo primer argumento
  file1 = fopen(argv[1],"r");
  //file2 = fopen(argv[2],"r");

  // Determine number of threads
  //sscanf(argv[3], "%d", &num_threads);
  num_threads = 5;
  
  if (NULL == file1){
    printf("no puedo abrir el archivo1\n");
    exit(1);
  }

  if (NULL == file2){
    printf("no puedo abrir el archivo2\n");
    exit(1);
  }
  
  //Poblar la matriz local
  for (i=0;i<3;i++){
    for(j=0;j<3;j++){
      fscanf(file1,"%d",&num);
      arr[i][j] = num;
      printf("data[%d][%d]=%d\n",i,j,arr[i][j]);
    }
  }
  
  fclose(file1);

  //Imprimir matriz local
  printf("\nThe matrix is : \n");
  for(i=0;i<3;i++){
    printf("\n");
    for(j=0;j<3;j++)
      printf("%d\t",arr[i][j]);
  }
  
  printf("\n\n");
  
  //VECTOR
  //Poblar el vector
  for (int vi=0;vi<3;vi++){
    fscanf(file2,"%d",&num2);
    vect[vi] = num2;
    printf("data[%d]=%d\n",vi,vect[vi]);
  }
  
  fclose(file2);
  
  //Imprimir vector local
  printf("\nThe vector is : \n");
  for(int vi=0;vi<3;vi++){
    printf("%d\t",vect[vi]);
  }
  
  printf("\n\n");
  
  /**
  if (NULL == file2){
    printf("no puedo abrir el archivo2\n");
    exit(1);
  }
  
  printf("el contenido del archivo es:\n");
  
  do{
    ch1 = fgetc(file1);
    printf("%c",ch1);
  }while(ch1!=EOF);

  fclose(file1);
  
  
  do{
    ch2 = fgetc(file2);
    printf("%c",ch2);
  }while(ch2!=EOF);
  
  fclose(file2);
  **/  
  // Allocating threads
  pthread_t* threads;
  threads = (pthread_t*)malloc(sizeof(pthread_t)*num_threads);
  
  // Creating the threads (branching, forking)
  for(long t=0; t<num_threads; t++)
    pthread_create(&threads[t], NULL, hello, (void*)t);
  
  // Do some work with main thread
  hello((void*)-1);
  
  // Terminate threads (join)
  for(long t=0; t<num_threads; t++)
    pthread_join(threads[t], NULL);
  
  // Deallocate memory
  free(threads);
  
  return 0;
}
////////////////////////////////////////////////////////////////////////////////
